    //1.Approval Management  ***********************************************************************************Status"*************************************
    var
        WorkflowManagement: Codeunit "Workflow Management";
        WorkflowEventHandling: Codeunit "WorkFlow Event Handling Ext.";
        NoWorkflowEnableErr: TextConst ENU = 'No approval worklow for this record type is enabled.';
        NothingToApproveErr: TextConst ENU = 'Lines Must Contain Record(s)';
        
        /*Master Rotation Plan2 */
        MasterRotationPlan: Record "Master Rotation Plan2";


    /*Master Rotation Plan2 */
    [IntegrationEvent(false, false)]	

    procedure OnSendMasterRotationPlanForApproval(var MasterRotationPlan: Record "Master Rotation Plan2")
    begin

    end;

    [IntegrationEvent(false, false)]

    procedure OnCancelMasterRotationPlanForApproval(var MasterRotationPlan: Record "Master Rotation Plan2")
    begin

    end;

    procedure CheckMasterRotationPlansWorkflowEnable(var MasterRotationPlan: Record "Master Rotation Plan2"): Boolean
    begin
        IF NOT IsMasterRotationPlanApplicationApprovalsWorkflowEnable(MasterRotationPlan) then
            Error(NoWorkflowEnableErr);
        exit(true)
    end;

    procedure IsMasterRotationPlanApplicationApprovalsWorkflowEnable(var MasterRotationPlan: Record "Master Rotation Plan2"): Boolean

    begin
        IF MasterRotationPlan."Status" <> MasterRotationPlan."Status"::Open then
            exit(false);
        exit(WorkflowManagement.CanExecuteWorkflow(MasterRotationPlan, WorkflowEventHandling.RunWorkflowOnSendMasterRotationPlanForApprovalCode));
    end;

    /* ****************************************************************************************************************************************** */

 [EventSubscriber(ObjectType::Codeunit, 1535, 'OnPopulateApprovalEntryArgument', '', false, false)]
    local procedure OnPopulateApprovalEntryArgument(var RecRef: RecordRef; var ApprovalEntryArgument: Record "Approval Entry"; WorkflowStepInstance: Record "Workflow Step Instance")
    begin
        
        case RecRef.Number of
        /*Master Rotation Plan2 */
           Database::"Master Rotation Plan2":
                begin
                    RecRef.SetTable(MasterRotationPlan);
                    ApprovalEntryArgument."Document No." := MasterRotationPlan."No.";
                end;
        end;
    end;



//2. "Workflow Setup Ext"   ************************************************************************************************************************
    
    var
        WorkflowSetup: CodeUnit "Workflow Setup";
        WorkflowStepArgument: Record "Workflow Step Argument";
        BlankDateFormula: DateFormula;
        WorkflowResponseHandling: Codeunit "Workflow Response Handling";
        WorkflowEventHandling: Codeunit "Workflow Event Handling Ext";
               /*Master Rotation Plan2 */
        MasterRotationPlan: Record "Master Rotation Plan2";
        MasterRotationPlanWorkflowCategoryTxt: TextConst ENU = 'Master Rotation';
        MasterRotationPlanWorkflowCategoryDescTxt: TextConst ENU = 'Master Rotation Plan Document';
        MasterRotationPlanWorkflowCodeTxt: TextConst ENU = 'MRPAW';
        MasterRotationPlanWorkfowDescTxt: TextConst ENU = 'Master Rotation Plan Approval Workflow';
        MasterRotationPlanTypeCondTxt: TextConst ENU = '<?xml version = "1.0" encoding="utf-8" standalone="yes"?><ReportParameters><DataItems><DataItem name=MasterRotationPlan>%1</DataItem></DataItems></ReportParameters>';
    
    /* *************************************************************************************************************************************/

  [EventSubscriber(ObjectType::Codeunit, Codeunit::"Workflow Setup", 'OnAddWorkflowCategoriesToLibrary', '', true, true)]

    local procedure OnAddWorkflowCategoriesToLibrary()

    begin
        WorkflowSetup.InsertWorkflowCategory(MasterRotationPlanWorkflowCategoryTxt, MasterRotationPlanWorkflowCategoryDescTxt);
    end;

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Workflow Setup", 'OnAfterInsertApprovalsTableRelations', '', true, true)]

    local procedure OnAfterInsertApprovalsTableRelations()
    var
        ApprovalEntry: Record "Approval Entry";
    begin
        WorkflowSetup.InsertTableRelation(Database::"Master Rotation Plan2", 0, Database::"Approval Entry", ApprovalEntry.FieldNo("Record ID to Approve"));
    end;

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Workflow Setup", 'OnInsertWorkflowTemplates', '', true, true)]

    local procedure OnInsertWorkflowTemplates()
    begin
        InsertMasterRotationPlanWorkflowTemplate();    
    end;

     /*Master Rotation Plan2 */
    local procedure InsertMasterRotationPlanWorkflowTemplate()
    var
        Workflow: Record Workflow;      
    begin
        WorkflowSetup.InsertWorkflowTemplate(Workflow, MasterRotationPlanWorkflowCodeTxt, MasterRotationPlanWorkfowDescTxt, MasterRotationPlanWorkflowCategoryTxt);
        InsertMasterRotationPlanWorkflowDetails(Workflow);
        WorkflowSetup.MarkWorkflowAsTemplate(Workflow);
    end;

    local procedure InsertMasterRotationPlanWorkflowDetails(var Workflow: Record Workflow)  
    begin
        WorkflowSetup.initWorkflowStepArgument(WorkflowStepArgument, WorkflowStepArgument."Approver Type"::Approver, WorkflowStepArgument."Approver Limit Type"::"Direct Approver", 0, '', BlankDateFormula, true);
        WorkflowSetup.InsertDocApprovalWorkflowSteps(
            Workflow,
            BuildMasterRotationPlanTypeConditions(MasterRotationPlan.Status::Open),
            WorkflowEventHandling.RunWorkflowOnSendMasterRotationPlanForApprovalCode,
            BuildMasterRotationPlanTypeConditions(MasterRotationPlan.Status::Pending),
            WorkflowEventHandling.RunWorkflowOnCancelMasterRotationPlanCode,
            WorkflowStepArgument,
            true
        );
    end;

    local procedure BuildMasterRotationPlanTypeConditions(Status: Integer): Text
    begin
    MasterRotationPlan.Reset;
        MasterRotationPlan.SetRange(Status, Status);
        exit(StrSubstNo(MasterRotationPlanTypeCondTxt, WorkflowSetup.Encode(MasterRotationPlan.GetView(false))))
    end;

/*******************************************************************************************************************************************************/


//3."Workflow Event Handling Ext"  ************************************************************************************************************************
  
  var
        WorkflowManagement: Codeunit "Workflow Management";
        WorkflowEventHandling: Codeunit "Workflow Event Handling";
         /*Master Rotation Plan2 */
        MasterRotationPlanSendForApprovalEventDescTxt: TextConst ENU = 'Approval of Master Rotation Plan is Requested';
        MasterRotationPlanRequestCancelEventDescTxt: TextConst ENU = 'Approval of Master Rotation Plan is Canceled';

    [EventSubscriber(ObjectType::Codeunit, 1520, 'OnAddWorkflowEventsToLibrary', '', false, false)]
    local procedure OnAddWorkflowEventsToLibrary()
    begin
        /*Master Rotation Plan2 */
        WorkflowEventHandling.AddEventToLibrary(RunWorkflowOnSendMasterRotationPlanForApprovalCode, Database::"Master Rotation Plan2", MasterRotationPlanSendForApprovalEventDescTxt, 0, false);
        WorkflowEventHandling.AddEventToLibrary(RunWorkflowOnCancelMasterRotationPlanCode, Database::"Master Rotation Plan2", MasterRotationPlanRequestCancelEventDescTxt, 0, false);
    end;

    [EventSubscriber(ObjectType::Codeunit, 1520, 'OnAddWorkflowEventPredecessorsToLibrary', '', false, false)]
    local procedure OnAddWorkflowEventPredecessorsToLibrary(EventFunctionName: Code[128])
    var
        WorkflowEvent: Codeunit "Workflow Event Handling";
    begin
        /*Master Rotation Plan2 */
        case EventFunctionName of
            RunWorkflowOnCancelMasterRotationPlanCode:
                WorkflowEventHandling.AddEventPredecessor(RunWorkflowOnCancelMasterRotationPlanCode, RunWorkflowOnSendMasterRotationPlanForApprovalCode);
            WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode:
                WorkflowEventHandling.AddEventPredecessor(WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode, RunWorkflowOnSendMasterRotationPlanForApprovalCode);
        end;
    end;

    /*Master Rotation Plan2 */
    procedure RunWorkflowOnSendMasterRotationPlanForApprovalCode(): Code[128]
    begin
        exit(UpperCase('RunWorkflowOnSendMasterRotationPlanForApproval'));
    end;

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Approval Mgnt. Ext.", 'OnSendMasterRotationPlanForApproval', '', true, true)]
    local procedure RunWorkflowOnSendMasterRotationPlanForApproval(Var MasterRotationPlan: Record "Master Rotation Plan2")
    begin
    
        WorkflowManagement.HandleEvent(RunWorkflowOnSendMasterRotationPlanForApprovalCode, MasterRotationPlan)
    end;

    procedure RunWorkflowOnCancelMasterRotationPlanCode(): Code[128]
    begin
        exit(UpperCase('RunWorkflowOnCancelMasterRotationPlan'));
    end;

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Approval Mgnt. Ext.", 'OnCancelMasterRotationPlanForApproval', '', true, true)]
    local procedure RunWorkflowOnCancelMasterRotationPlan(Var MasterRotationPlan: Record "Master Rotation Plan2")	
    begin
        WorkflowManagement.HandleEvent(RunWorkflowOnCancelMasterRotationPlanCode, MasterRotationPlan);
        MasterRotationPlan.Reset();
        MasterRotationPlan.SetRange("No.", MasterRotationPlan."No.");
        if MasterRotationPlan.FindFirst() then begin
            MasterRotationPlan.Status := MasterRotationPlan.Status::Open;
            MasterRotationPlan.Modify()
        end;
    end;
	
    /*************************************************************************************************************************** */
    procedure RunWorkflowOnSendBContrForApprovalCode(): Code[128]
    begin
        EXIT(UPPERCASE('RunWorkflowOnSendBContrForApproval'));
    end;

    procedure RunWorkflowOnCancelBContrApprovalRequestCode(): Code[128]
    begin
        EXIT(UPPERCASE('RunWorkflowOnCancelBContrApprovalRequest'));
    end;

    procedure RunWorkflowOnAfterReleaseBContrCode(): Code[128]
    begin
        EXIT(UPPERCASE('RunWorkflowOnAfterReleaseBContr'));
    end;

  

//4. "Workflow Response Handling Ext" ************************************************************************************************************************
 
 
var
    MasterRotationPlan: Record "Master Rotation Plan2";

[EventSubscriber(ObjectType::Codeunit, Codeunit::"Workflow Response Handling", 'OnOpenDocument', '', true, true)]
    local procedure OnOpenDocument(RecRef: RecordRef; var Handled: Boolean)
    begin
        case RecRef.Number of
         /*Master Rotation Plan2 */
           Database::"Master Rotation Plan2":
                begin
                    RecRef.SetTable(MasterRotationPlan);
                    MasterRotationPlan.Status := MasterRotationPlan.Status::Open;
                    MasterRotationPlan.Modify;
                    Handled := true;
                end;
        end;
    end;

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Workflow Response Handling", 'OnReleaseDocument', '', true, true)]

    local procedure OnReleaseDocument(RecRef: RecordRef; var Handled: Boolean)
    begin
        case RecRef.Number of
            /*Master Rotation Plan2 */
               Database::"Master Rotation Plan2":
                    begin
                        RecRef.setTable(MasterRotationPlan);
                        MasterRotationPlan.Status := MasterRotationPlan.Status::Approved;
                        MasterRotationPlan.Modify();
                        Handled := true;
                    end;
        end;
    end;

    [EventSubscriber(ObjectType::Codeunit, 1535, 'OnSetStatusToPendingApproval', '', true, true)]

    local procedure OnSetStatusToPendingApproval(RecRef: RecordRef; var IsHandled: Boolean)
    begin
        case RecRef.Number of
         /*Master Rotation Plan2 */
           Database::"Master Rotation Plan2":
                begin
                    RecRef.setTable(MasterRotationPlan);
                    MasterRotationPlan.Status := MasterRotationPlan.Status::Pending;
                    MasterRotationPlan.Modify();
                    IsHandled := true;
                end;
        end;
    end;

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Workflow Response Handling", 'OnAddWorkflowResponsePredecessorsToLibrary', '', true, true)]

    local procedure OnAddWorkflowResponsePredecessorsToLibrary(ResponseFunctionName: Code[128])

    var
        WorkflowResponseHandling: Codeunit "Workflow Response Handling";
        WorkflowEventHandling: Codeunit "Workflow Event Handling Ext.";
    begin
     /*Master Rotation Plan2 */
        CASE ResponseFunctionName of
            WorkflowResponseHandling.SetStatusToPendingApprovalCode:
                WorkflowResponseHandling.AddResponsePredecessor(WorkflowResponseHandling.SetStatusToPendingApprovalCode,
                WorkflowEventHandling.RunWorkflowOnSendMasterRotationPlanForApprovalCode);
            WorkflowResponseHandling.SendApprovalRequestForApprovalCode:
                WorkflowResponseHandling.AddResponsePredecessor(WorkflowResponseHandling.SendApprovalRequestForApprovalCode,
                WorkflowEventHandling.RunWorkflowOnSendMasterRotationPlanForApprovalCode);
            WorkflowResponseHandling.CancelAllApprovalRequestsCode:
                WorkflowResponseHandling.AddResponsePredecessor(WorkflowResponseHandling.CancelAllApprovalRequestsCode,
                WorkflowEventHandling.RunWorkflowOnCancelMasterRotationPlanCode);
            WorkflowResponseHandling.OpenDocumentCode:
                    WorkflowResponseHandling.AddResponsePredecessor(WorkflowResponseHandling.OpenDocumentCode, WorkflowEventHandling.RunWorkflowOnCancelMasterRotationPlanCode);
        END;
    end;
    
  
************************************************************************************************************************
    actions
    {
        area(Processing)
        {
             action(Approvals)
            {
                Image = Approvals;
                Promoted = true;
                PromotedCategory = Process;
                ApplicationArea = Basic, Suite;
                RunObject = page "Approval Entries";
                RunPageLink = "Document No." = field("No.");
                Visible = not (Rec.Status=Rec.Status::Open);
            }
            action("Request Approval")
            {
                ApplicationArea = Basic, Suite;
                Promoted = true;
                PromotedCategory = Process;
                Image = SendApprovalRequest;
                Visible = Rec.Status=Rec.Status::Open;

                trigger OnAction()
                begin
                    If ApprovalsMgmt.CheckMasterRotationPlansWorkflowEnable(Rec) then
                        ApprovalsMgmt.OnSendMasterRotationPlanForApproval(Rec);
                end;
            }
            action("Cancel Approval")
            {
                ApplicationArea = Basic, Suite;
                Promoted = true;
                PromotedCategory = Process;
                Image = CancelApprovalRequest;
                Visible = Rec.Status=Rec.Status::Pending;

                trigger OnAction()
                begin
                    ApprovalsMgmt.OnCancelMasterRotationPlanForApproval(Rec);
                end;
            }
              action("Re-Open")
            {
                ApplicationArea = Basic, Suite;
                Promoted = true;
                PromotedCategory = Process;
                Image = ReOpen;
                Visible = (Rec.Status=Rec.Status::Cancelled);

                trigger OnAction()
                var
                    SuccessMsg: Label 'The Document has been re-openned successfully';
                begin
                    Rec.Status := Rec.Status::Open;
                    Rec.Modify();
                    Message(SuccessMsg);
                    CurrPage.Update();
                end;
            }

        }
    }

 trigger OnInit()
    begin
        PageCtrls();
    end;

    trigger OnOpenPage()
    begin
        PageCtrls();
    end;

    trigger OnModifyRecord(): Boolean
    begin
        PageCtrls();
    end;

    local procedure PageCtrls()
    begin
        if Rec.Status = Rec.Status::Open then
            Rec,Status=Rec.Status::Open := true else begin
            Rec,Status=Rec.Status::Open := false;
            if Rec.Status = Rec.Status::Pending then
                Rec.Status=Rec.Status::Pending := true else begin
                Rec.Status=Rec.Status::Pending := false;
                if Rec.Status = Rec.Status::Cancelled then
                    IsCancelled := true else begin
                    IsCancelled := false;
                    if Rec.Status = Rec.Status::Approved then
                        IsApproved := true else begin
                        IsApproved := false;
                        if Rec.Status = Rec.Status::Rejected then
                            Rec.Status=Rec.Status::Rejected := true else begin
                            Rec.Status=Rec.Status::Rejected := false;
                            if Rec.Status = Rec.Status::Closed then
                                Rec.Status=Rec.Status::Closed := true else begin
                                Rec.Status=Rec.Status::Closed := false;
                            end;
                        end;
                    end;
                end;
            end;
        end;
    end;

    var
            ApprovalsMgmt:CodeUnit "Approval Mgnt. Ext.";
            Rec,Status=Rec.Status::Open, Rec.Status=Rec.Status::Pending, Rec.Status=Rec.Status::Closed, Rec.Status=Rec.Status::Rejected, IsApproved, IsCancelled : Boolean;






